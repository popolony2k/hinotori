(*<funcptr.pas>
 * Function pointer implementation for Turbo Pascal 3.
 * Unfortunately this feature doesn't exist in TP3 core language.
 * CopyLeft (c) 1995-2024 by PopolonY2k.
 * CopyLeft (c) since 2024 by Hinotori Team.
 *)

(*
 * This source file depends on following include files (respect the order):
 * -
 *)

(**
  * This function can be used to call a function with the Prototype below:
  * procedure ( nParmAddr : integer );
  * This is a way to implement the pointer-to-function feature missed in
  * the Turbo Pascal 3 core language.
  * @param nProcAddr The procedure address (must to be in format described
  * above);
  * @param nProcParm The integer parameter to pass to Pascal procedure;
  *)
procedure CallProc( nProcAddr, nProcParm : integer );
begin
  (*
   * The ASM routine below is located in the .\ASM\ project folder
   * and was generated by INLASS.
   *)
  inline(
          $ED/$5B/nProcParm       {          LD DE,(NPROCPARM)  }
          /$21/*+$0008            {          LD HL,ENDF         }
          /$D5                    {          PUSH DE            }
          /$E5                    {          PUSH HL            }
          /$2A/nProcAddr          {          LD HL,(NPROCADDR)  }
          /$E9                    {          JP (HL)            }
                                  { ENDF:    END                } );
end;

(**
  * This function can be used to call a function with the Prototype below:
  * procedure NoParameterFn;
  * This is a way to implement the pointer-to-function feature missed in
  * the Turbo Pascal 3 core language.
  * @param nProcAddr The procedure address (must to be in format described
  * above);
  *)
procedure CallProcNoParm( nProcAddr : integer );
begin
  (*
   * The ASM routine below is located in the .\ASM\ project folder
   * and was generated by INLASS.
   *)
  inline(
          $21/*+$0007             {          LD HL,ENDF         }
          /$E5                    {          PUSH HL            }
          /$2A/nProcAddr          {          LD HL,(nProcAddr)  }
          /$E9                    {          JP (HL)            }
                                  { ENDF:    END                } );
end;
