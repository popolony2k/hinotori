(*<maprrw.pas>
 * Memory mapper management implementation using MSXDOS2 EXTBIO calls.
 * CopyLeft (c) 1995-2024 by PopolonY2k.
 * CopyLeft (c) since 2024 by Hinotori Team.
 *)

(*
 * This module depends on folowing include files (respect the order):
 * - /system/types.pas;
 * - /bios/msxbios.pas;
 * - /bios/extbio.pas;
 * - /mapper/maprdefs.pas;
 * - /mapper/maprbase.pas;
 *)


(**
  * Read a byte from a specified address in a memory mapper segment.
  * @param handle The allocated handle by the @see InitMapper routine;
  * @param nSegmentId The mapper id that will be read;
  * @param nAddress Address to read within the specified segment;
  *)
Function ReadMapperSegment( Var handle : TMapperHandle;
                            nSegmentId : Byte;
                            nAddress   : Integer ) : Byte;
Var
        nValue      : Byte;
        nJmpTblAddr : Integer;

Begin
  nJmpTblAddr := handle.nStartAddrJumpTbl + ctRD_SEG;

  (*
   * The ASM routine below is located in the .\ASM\ project folder
   * and was generated by INLASS.
   *)
  Inline(
          $21/*+$000F          {       LD HL,retj                    }
          /$E5                 {       PUSH HL                       }
          /$3A/nSegmentId      {       LD A,(nSegmentId)             }
          /$2A/nAddress        {       LD HL,(nAddress)              }
          /$DD/$2A/nJmpTblAddr {       LD IX,(nJmpTblAddr)           }
          /$DD/$E9             {       JP (IX)                       }
          /$32/nValue          { retj: LD (nValue),A                 }
                               {       END                           } );

  ReadMapperSegment := nValue;
End;

(**
  * Write a byte to a specified address in a memory mapper segment.
  * @param handle The allocated handle by the @see InitMapper routine;
  * @param nSegmentId The mapper id that will be written;
  * @param nAddress Address to write within the specified segment;
  * @param nValue The value to write;
  *)
Function WriteMapperSegment( Var handle : TMapperHandle;
                             nSegmentId : Byte;
                             nAddress   : Integer;
                             nValue     : Byte ) : Boolean;
Var
        nRetCode    : Byte;
        nJmpTblAddr : Integer;

Begin
  nJmpTblAddr := handle.nStartAddrJumpTbl + ctWR_SEG;

  (*
   * The ASM routine below is located in the .\ASM\ project folder
   * and was generated by INLASS.
   *)
  Inline(
          $21/*+$0013          {       LD HL,retj                    }
          /$E5                 {       PUSH HL                       }
          /$3A/nValue          {       LD A,(nValue)                 }
          /$5F                 {       LD E,A                        }
          /$3A/nSegmentId      {       LD A,(nSegmentId)             }
          /$2A/nAddress        {       LD HL,(nAddress)              }
          /$DD/$2A/nJmpTblAddr {       LD IX,(nJmpTblAddr)           }
          /$DD/$E9             {       JP (IX)                       }
          /$32/nRetCode        { retj: LD (nRetCode),A               }
                               {       END                           } );

  WriteMapperSegment := Boolean( nRetCode );
End;
